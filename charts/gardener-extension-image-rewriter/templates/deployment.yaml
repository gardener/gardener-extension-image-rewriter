---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: gardener-extension-image-rewriter
  namespace: {{ .Release.Namespace }}
  labels:
    app.kubernetes.io/name: gardener-extension-image-rewriter
    helm.sh/chart: gardener-extension-image-rewriter
    app.kubernetes.io/instance: {{ .Release.Name }}
    high-availability-config.resources.gardener.cloud/type: server
spec:
  revisionHistoryLimit: 2
  replicas: {{ .Values.replicaCount }}
  selector:
    matchLabels:
      app.kubernetes.io/name: gardener-extension-image-rewriter
      app.kubernetes.io/instance: {{ .Release.Name }}
  template:
    metadata:
      annotations:
        checksum/configmap-controller-config: {{ include "config" . | sha256sum }}
      labels:
        app.kubernetes.io/name: gardener-extension-image-rewriter
        app.kubernetes.io/instance: {{ .Release.Name }}
        networking.gardener.cloud/to-runtime-apiserver: allowed
        networking.gardener.cloud/to-dns: allowed
        networking.resources.gardener.cloud/to-all-shoots-kube-apiserver-tcp-443: allowed
    spec:
      priorityClassName: gardener-system-900
      serviceAccountName: gardener-extension-image-rewriter
      containers:
      - name: gardener-extension-image-rewriter
        image: {{ include "image" . }}
        imagePullPolicy: {{ .Values.image.pullPolicy }}
        args:
        - --config=/etc/image-rewriter/config.yaml
        - --max-concurrent-reconciles={{ .Values.controllers.concurrentSyncs }}
        - --heartbeat-namespace={{ .Release.Namespace }} 
        - --heartbeat-renew-interval-seconds={{ .Values.controllers.heartbeat.renewIntervalSeconds }} 
        - --disable-controllers={{ .Values.disableControllers | join "," }}
        - --ignore-operation-annotation={{ .Values.controllers.ignoreOperationAnnotation }}
        - --leader-election-id={{ include "leaderelectionid" . }}
        - --webhook-config-namespace={{ .Release.Namespace }}
        - --webhook-config-service-port={{ .Values.webhookConfig.servicePort }}
        - --webhook-config-server-port={{ .Values.webhookConfig.serverPort }}
        env:
        - name: LEADER_ELECTION_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        securityContext:
          allowPrivilegeEscalation: false
        livenessProbe:
          httpGet:
            path: /healthz
            port: {{ .Values.healthPort }}
            scheme: HTTP
          initialDelaySeconds: 10
        readinessProbe:
          httpGet:
            path: /readyz
            port: {{ .Values.healthPort }}
            scheme: HTTP
          initialDelaySeconds: 5
        ports:
        - name: webhook-server
          containerPort: {{ .Values.webhookConfig.serverPort }}
          protocol: TCP
        {{- if .Values.resources }}
        resources:
{{ toYaml .Values.resources | trim | indent 10 }}
        {{- end }}
        volumeMounts:
        - name: config
          mountPath: /etc/image-rewriter
          readOnly: true
      volumes:
      - name: config
        configMap:
          name: extension-image-rewriter
